// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v5.28.3
// source: com/ecommerceapp/v1/users.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { Timestamp } from "../../../google/protobuf/timestamp";

export const protobufPackage = "com.ecommerceapp.v1";

export enum Gender {
  GENDER_UNSPECIFIED = 0,
  GENDER_MALE = 1,
  GENDER_FEMALE = 2,
  GENDER_OTHER = 3,
  UNRECOGNIZED = -1,
}

export function genderFromJSON(object: any): Gender {
  switch (object) {
    case 0:
    case "GENDER_UNSPECIFIED":
      return Gender.GENDER_UNSPECIFIED;
    case 1:
    case "GENDER_MALE":
      return Gender.GENDER_MALE;
    case 2:
    case "GENDER_FEMALE":
      return Gender.GENDER_FEMALE;
    case 3:
    case "GENDER_OTHER":
      return Gender.GENDER_OTHER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Gender.UNRECOGNIZED;
  }
}

export function genderToJSON(object: Gender): string {
  switch (object) {
    case Gender.GENDER_UNSPECIFIED:
      return "GENDER_UNSPECIFIED";
    case Gender.GENDER_MALE:
      return "GENDER_MALE";
    case Gender.GENDER_FEMALE:
      return "GENDER_FEMALE";
    case Gender.GENDER_OTHER:
      return "GENDER_OTHER";
    case Gender.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Role Enum */
export enum Role {
  ROLE_UNSPECIFIED = 0,
  ROLE_CUSTOMER = 1,
  ROLE_SHIPPER = 2,
  ROLE_SHOPOWNER = 3,
  UNRECOGNIZED = -1,
}

export function roleFromJSON(object: any): Role {
  switch (object) {
    case 0:
    case "ROLE_UNSPECIFIED":
      return Role.ROLE_UNSPECIFIED;
    case 1:
    case "ROLE_CUSTOMER":
      return Role.ROLE_CUSTOMER;
    case 2:
    case "ROLE_SHIPPER":
      return Role.ROLE_SHIPPER;
    case 3:
    case "ROLE_SHOPOWNER":
      return Role.ROLE_SHOPOWNER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Role.UNRECOGNIZED;
  }
}

export function roleToJSON(object: Role): string {
  switch (object) {
    case Role.ROLE_UNSPECIFIED:
      return "ROLE_UNSPECIFIED";
    case Role.ROLE_CUSTOMER:
      return "ROLE_CUSTOMER";
    case Role.ROLE_SHIPPER:
      return "ROLE_SHIPPER";
    case Role.ROLE_SHOPOWNER:
      return "ROLE_SHOPOWNER";
    case Role.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface CreateUserRequest {
  id: string;
  firstName: string;
  lastName: string;
  email: string;
  phoneNumber: string;
  username: string;
  password: string;
  addressLine1: string;
  addressLine2: string;
  city: string;
  nation: string;
  gender: Gender;
  role: Role;
  dateOfBirth:
    | Date
    | undefined;
  /** Optional fields for one-to-one relationships */
  customer: CreateCustomerCommand | undefined;
  shipper: CreateShipperCommand | undefined;
  shopOwner: CreateCustomerCommand | undefined;
}

/** Define fields for Customer here if needed */
export interface CreateCustomerCommand {
}

/** Define fields for ShopOwner here if needed */
export interface CreateShopOwnerCommand {
}

export interface CreateShipperCommand {
  /** Define fields for Shipper here if needed */
  shipmentInventoryId: string;
}

export interface Customer {
  /** Define fields for Customer here if needed */
  point: number;
}

export interface Shipper {
  /** Define fields for Shipper here if needed */
  shipmentInventoryId: string;
}

export interface ShopOwner {
  /** Define fields for ShopOwner here if needed */
  numOfShop: number;
}

export interface CreateUserResponse {
  id: string;
  firstName: string;
  lastName: string;
  email: string;
  phoneNumber: string;
  username: string;
  addressLine1: string;
  addressLine2?: string | undefined;
  city: string;
  nation: string;
  gender: Gender;
  role: Role;
  dateOfBirth: Date | undefined;
  customer?: Customer | undefined;
  shipper?: Shipper | undefined;
  shopOwner?: ShopOwner | undefined;
}

function createBaseCreateUserRequest(): CreateUserRequest {
  return {
    id: "",
    firstName: "",
    lastName: "",
    email: "",
    phoneNumber: "",
    username: "",
    password: "",
    addressLine1: "",
    addressLine2: "",
    city: "",
    nation: "",
    gender: 0,
    role: 0,
    dateOfBirth: undefined,
    customer: undefined,
    shipper: undefined,
    shopOwner: undefined,
  };
}

export const CreateUserRequest: MessageFns<CreateUserRequest> = {
  encode(message: CreateUserRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.firstName !== "") {
      writer.uint32(18).string(message.firstName);
    }
    if (message.lastName !== "") {
      writer.uint32(26).string(message.lastName);
    }
    if (message.email !== "") {
      writer.uint32(34).string(message.email);
    }
    if (message.phoneNumber !== "") {
      writer.uint32(42).string(message.phoneNumber);
    }
    if (message.username !== "") {
      writer.uint32(50).string(message.username);
    }
    if (message.password !== "") {
      writer.uint32(58).string(message.password);
    }
    if (message.addressLine1 !== "") {
      writer.uint32(66).string(message.addressLine1);
    }
    if (message.addressLine2 !== "") {
      writer.uint32(74).string(message.addressLine2);
    }
    if (message.city !== "") {
      writer.uint32(82).string(message.city);
    }
    if (message.nation !== "") {
      writer.uint32(90).string(message.nation);
    }
    if (message.gender !== 0) {
      writer.uint32(96).int32(message.gender);
    }
    if (message.role !== 0) {
      writer.uint32(104).int32(message.role);
    }
    if (message.dateOfBirth !== undefined) {
      Timestamp.encode(toTimestamp(message.dateOfBirth), writer.uint32(114).fork()).join();
    }
    if (message.customer !== undefined) {
      CreateCustomerCommand.encode(message.customer, writer.uint32(122).fork()).join();
    }
    if (message.shipper !== undefined) {
      CreateShipperCommand.encode(message.shipper, writer.uint32(130).fork()).join();
    }
    if (message.shopOwner !== undefined) {
      CreateCustomerCommand.encode(message.shopOwner, writer.uint32(138).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateUserRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.firstName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.lastName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.phoneNumber = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.username = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.password = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.addressLine1 = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.addressLine2 = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.city = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.nation = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.gender = reader.int32() as any;
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.role = reader.int32() as any;
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.dateOfBirth = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.customer = CreateCustomerCommand.decode(reader, reader.uint32());
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.shipper = CreateShipperCommand.decode(reader, reader.uint32());
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.shopOwner = CreateCustomerCommand.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateUserRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      firstName: isSet(object.firstName) ? globalThis.String(object.firstName) : "",
      lastName: isSet(object.lastName) ? globalThis.String(object.lastName) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      phoneNumber: isSet(object.phoneNumber) ? globalThis.String(object.phoneNumber) : "",
      username: isSet(object.username) ? globalThis.String(object.username) : "",
      password: isSet(object.password) ? globalThis.String(object.password) : "",
      addressLine1: isSet(object.addressLine1) ? globalThis.String(object.addressLine1) : "",
      addressLine2: isSet(object.addressLine2) ? globalThis.String(object.addressLine2) : "",
      city: isSet(object.city) ? globalThis.String(object.city) : "",
      nation: isSet(object.nation) ? globalThis.String(object.nation) : "",
      gender: isSet(object.gender) ? genderFromJSON(object.gender) : 0,
      role: isSet(object.role) ? roleFromJSON(object.role) : 0,
      dateOfBirth: isSet(object.dateOfBirth) ? fromJsonTimestamp(object.dateOfBirth) : undefined,
      customer: isSet(object.customer) ? CreateCustomerCommand.fromJSON(object.customer) : undefined,
      shipper: isSet(object.shipper) ? CreateShipperCommand.fromJSON(object.shipper) : undefined,
      shopOwner: isSet(object.shopOwner) ? CreateCustomerCommand.fromJSON(object.shopOwner) : undefined,
    };
  },

  toJSON(message: CreateUserRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.firstName !== "") {
      obj.firstName = message.firstName;
    }
    if (message.lastName !== "") {
      obj.lastName = message.lastName;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.phoneNumber !== "") {
      obj.phoneNumber = message.phoneNumber;
    }
    if (message.username !== "") {
      obj.username = message.username;
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    if (message.addressLine1 !== "") {
      obj.addressLine1 = message.addressLine1;
    }
    if (message.addressLine2 !== "") {
      obj.addressLine2 = message.addressLine2;
    }
    if (message.city !== "") {
      obj.city = message.city;
    }
    if (message.nation !== "") {
      obj.nation = message.nation;
    }
    if (message.gender !== 0) {
      obj.gender = genderToJSON(message.gender);
    }
    if (message.role !== 0) {
      obj.role = roleToJSON(message.role);
    }
    if (message.dateOfBirth !== undefined) {
      obj.dateOfBirth = message.dateOfBirth.toISOString();
    }
    if (message.customer !== undefined) {
      obj.customer = CreateCustomerCommand.toJSON(message.customer);
    }
    if (message.shipper !== undefined) {
      obj.shipper = CreateShipperCommand.toJSON(message.shipper);
    }
    if (message.shopOwner !== undefined) {
      obj.shopOwner = CreateCustomerCommand.toJSON(message.shopOwner);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateUserRequest>, I>>(base?: I): CreateUserRequest {
    return CreateUserRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateUserRequest>, I>>(object: I): CreateUserRequest {
    const message = createBaseCreateUserRequest();
    message.id = object.id ?? "";
    message.firstName = object.firstName ?? "";
    message.lastName = object.lastName ?? "";
    message.email = object.email ?? "";
    message.phoneNumber = object.phoneNumber ?? "";
    message.username = object.username ?? "";
    message.password = object.password ?? "";
    message.addressLine1 = object.addressLine1 ?? "";
    message.addressLine2 = object.addressLine2 ?? "";
    message.city = object.city ?? "";
    message.nation = object.nation ?? "";
    message.gender = object.gender ?? 0;
    message.role = object.role ?? 0;
    message.dateOfBirth = object.dateOfBirth ?? undefined;
    message.customer = (object.customer !== undefined && object.customer !== null)
      ? CreateCustomerCommand.fromPartial(object.customer)
      : undefined;
    message.shipper = (object.shipper !== undefined && object.shipper !== null)
      ? CreateShipperCommand.fromPartial(object.shipper)
      : undefined;
    message.shopOwner = (object.shopOwner !== undefined && object.shopOwner !== null)
      ? CreateCustomerCommand.fromPartial(object.shopOwner)
      : undefined;
    return message;
  },
};

function createBaseCreateCustomerCommand(): CreateCustomerCommand {
  return {};
}

export const CreateCustomerCommand: MessageFns<CreateCustomerCommand> = {
  encode(_: CreateCustomerCommand, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateCustomerCommand {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateCustomerCommand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CreateCustomerCommand {
    return {};
  },

  toJSON(_: CreateCustomerCommand): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateCustomerCommand>, I>>(base?: I): CreateCustomerCommand {
    return CreateCustomerCommand.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateCustomerCommand>, I>>(_: I): CreateCustomerCommand {
    const message = createBaseCreateCustomerCommand();
    return message;
  },
};

function createBaseCreateShopOwnerCommand(): CreateShopOwnerCommand {
  return {};
}

export const CreateShopOwnerCommand: MessageFns<CreateShopOwnerCommand> = {
  encode(_: CreateShopOwnerCommand, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateShopOwnerCommand {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateShopOwnerCommand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CreateShopOwnerCommand {
    return {};
  },

  toJSON(_: CreateShopOwnerCommand): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateShopOwnerCommand>, I>>(base?: I): CreateShopOwnerCommand {
    return CreateShopOwnerCommand.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateShopOwnerCommand>, I>>(_: I): CreateShopOwnerCommand {
    const message = createBaseCreateShopOwnerCommand();
    return message;
  },
};

function createBaseCreateShipperCommand(): CreateShipperCommand {
  return { shipmentInventoryId: "" };
}

export const CreateShipperCommand: MessageFns<CreateShipperCommand> = {
  encode(message: CreateShipperCommand, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.shipmentInventoryId !== "") {
      writer.uint32(10).string(message.shipmentInventoryId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateShipperCommand {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateShipperCommand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.shipmentInventoryId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateShipperCommand {
    return {
      shipmentInventoryId: isSet(object.shipmentInventoryId) ? globalThis.String(object.shipmentInventoryId) : "",
    };
  },

  toJSON(message: CreateShipperCommand): unknown {
    const obj: any = {};
    if (message.shipmentInventoryId !== "") {
      obj.shipmentInventoryId = message.shipmentInventoryId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateShipperCommand>, I>>(base?: I): CreateShipperCommand {
    return CreateShipperCommand.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateShipperCommand>, I>>(object: I): CreateShipperCommand {
    const message = createBaseCreateShipperCommand();
    message.shipmentInventoryId = object.shipmentInventoryId ?? "";
    return message;
  },
};

function createBaseCustomer(): Customer {
  return { point: 0 };
}

export const Customer: MessageFns<Customer> = {
  encode(message: Customer, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.point !== 0) {
      writer.uint32(8).uint64(message.point);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Customer {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.point = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Customer {
    return { point: isSet(object.point) ? globalThis.Number(object.point) : 0 };
  },

  toJSON(message: Customer): unknown {
    const obj: any = {};
    if (message.point !== 0) {
      obj.point = Math.round(message.point);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Customer>, I>>(base?: I): Customer {
    return Customer.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Customer>, I>>(object: I): Customer {
    const message = createBaseCustomer();
    message.point = object.point ?? 0;
    return message;
  },
};

function createBaseShipper(): Shipper {
  return { shipmentInventoryId: "" };
}

export const Shipper: MessageFns<Shipper> = {
  encode(message: Shipper, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.shipmentInventoryId !== "") {
      writer.uint32(10).string(message.shipmentInventoryId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Shipper {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseShipper();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.shipmentInventoryId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Shipper {
    return {
      shipmentInventoryId: isSet(object.shipmentInventoryId) ? globalThis.String(object.shipmentInventoryId) : "",
    };
  },

  toJSON(message: Shipper): unknown {
    const obj: any = {};
    if (message.shipmentInventoryId !== "") {
      obj.shipmentInventoryId = message.shipmentInventoryId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Shipper>, I>>(base?: I): Shipper {
    return Shipper.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Shipper>, I>>(object: I): Shipper {
    const message = createBaseShipper();
    message.shipmentInventoryId = object.shipmentInventoryId ?? "";
    return message;
  },
};

function createBaseShopOwner(): ShopOwner {
  return { numOfShop: 0 };
}

export const ShopOwner: MessageFns<ShopOwner> = {
  encode(message: ShopOwner, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.numOfShop !== 0) {
      writer.uint32(8).uint64(message.numOfShop);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ShopOwner {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseShopOwner();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.numOfShop = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ShopOwner {
    return { numOfShop: isSet(object.numOfShop) ? globalThis.Number(object.numOfShop) : 0 };
  },

  toJSON(message: ShopOwner): unknown {
    const obj: any = {};
    if (message.numOfShop !== 0) {
      obj.numOfShop = Math.round(message.numOfShop);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ShopOwner>, I>>(base?: I): ShopOwner {
    return ShopOwner.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ShopOwner>, I>>(object: I): ShopOwner {
    const message = createBaseShopOwner();
    message.numOfShop = object.numOfShop ?? 0;
    return message;
  },
};

function createBaseCreateUserResponse(): CreateUserResponse {
  return {
    id: "",
    firstName: "",
    lastName: "",
    email: "",
    phoneNumber: "",
    username: "",
    addressLine1: "",
    addressLine2: undefined,
    city: "",
    nation: "",
    gender: 0,
    role: 0,
    dateOfBirth: undefined,
    customer: undefined,
    shipper: undefined,
    shopOwner: undefined,
  };
}

export const CreateUserResponse: MessageFns<CreateUserResponse> = {
  encode(message: CreateUserResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.firstName !== "") {
      writer.uint32(18).string(message.firstName);
    }
    if (message.lastName !== "") {
      writer.uint32(26).string(message.lastName);
    }
    if (message.email !== "") {
      writer.uint32(34).string(message.email);
    }
    if (message.phoneNumber !== "") {
      writer.uint32(42).string(message.phoneNumber);
    }
    if (message.username !== "") {
      writer.uint32(50).string(message.username);
    }
    if (message.addressLine1 !== "") {
      writer.uint32(58).string(message.addressLine1);
    }
    if (message.addressLine2 !== undefined) {
      writer.uint32(66).string(message.addressLine2);
    }
    if (message.city !== "") {
      writer.uint32(74).string(message.city);
    }
    if (message.nation !== "") {
      writer.uint32(82).string(message.nation);
    }
    if (message.gender !== 0) {
      writer.uint32(88).int32(message.gender);
    }
    if (message.role !== 0) {
      writer.uint32(96).int32(message.role);
    }
    if (message.dateOfBirth !== undefined) {
      Timestamp.encode(toTimestamp(message.dateOfBirth), writer.uint32(106).fork()).join();
    }
    if (message.customer !== undefined) {
      Customer.encode(message.customer, writer.uint32(114).fork()).join();
    }
    if (message.shipper !== undefined) {
      Shipper.encode(message.shipper, writer.uint32(122).fork()).join();
    }
    if (message.shopOwner !== undefined) {
      ShopOwner.encode(message.shopOwner, writer.uint32(130).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateUserResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateUserResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.firstName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.lastName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.phoneNumber = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.username = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.addressLine1 = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.addressLine2 = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.city = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.nation = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.gender = reader.int32() as any;
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.role = reader.int32() as any;
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.dateOfBirth = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.customer = Customer.decode(reader, reader.uint32());
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.shipper = Shipper.decode(reader, reader.uint32());
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.shopOwner = ShopOwner.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateUserResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      firstName: isSet(object.firstName) ? globalThis.String(object.firstName) : "",
      lastName: isSet(object.lastName) ? globalThis.String(object.lastName) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      phoneNumber: isSet(object.phoneNumber) ? globalThis.String(object.phoneNumber) : "",
      username: isSet(object.username) ? globalThis.String(object.username) : "",
      addressLine1: isSet(object.addressLine1) ? globalThis.String(object.addressLine1) : "",
      addressLine2: isSet(object.addressLine2) ? globalThis.String(object.addressLine2) : undefined,
      city: isSet(object.city) ? globalThis.String(object.city) : "",
      nation: isSet(object.nation) ? globalThis.String(object.nation) : "",
      gender: isSet(object.gender) ? genderFromJSON(object.gender) : 0,
      role: isSet(object.role) ? roleFromJSON(object.role) : 0,
      dateOfBirth: isSet(object.dateOfBirth) ? fromJsonTimestamp(object.dateOfBirth) : undefined,
      customer: isSet(object.customer) ? Customer.fromJSON(object.customer) : undefined,
      shipper: isSet(object.shipper) ? Shipper.fromJSON(object.shipper) : undefined,
      shopOwner: isSet(object.shopOwner) ? ShopOwner.fromJSON(object.shopOwner) : undefined,
    };
  },

  toJSON(message: CreateUserResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.firstName !== "") {
      obj.firstName = message.firstName;
    }
    if (message.lastName !== "") {
      obj.lastName = message.lastName;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.phoneNumber !== "") {
      obj.phoneNumber = message.phoneNumber;
    }
    if (message.username !== "") {
      obj.username = message.username;
    }
    if (message.addressLine1 !== "") {
      obj.addressLine1 = message.addressLine1;
    }
    if (message.addressLine2 !== undefined) {
      obj.addressLine2 = message.addressLine2;
    }
    if (message.city !== "") {
      obj.city = message.city;
    }
    if (message.nation !== "") {
      obj.nation = message.nation;
    }
    if (message.gender !== 0) {
      obj.gender = genderToJSON(message.gender);
    }
    if (message.role !== 0) {
      obj.role = roleToJSON(message.role);
    }
    if (message.dateOfBirth !== undefined) {
      obj.dateOfBirth = message.dateOfBirth.toISOString();
    }
    if (message.customer !== undefined) {
      obj.customer = Customer.toJSON(message.customer);
    }
    if (message.shipper !== undefined) {
      obj.shipper = Shipper.toJSON(message.shipper);
    }
    if (message.shopOwner !== undefined) {
      obj.shopOwner = ShopOwner.toJSON(message.shopOwner);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateUserResponse>, I>>(base?: I): CreateUserResponse {
    return CreateUserResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateUserResponse>, I>>(object: I): CreateUserResponse {
    const message = createBaseCreateUserResponse();
    message.id = object.id ?? "";
    message.firstName = object.firstName ?? "";
    message.lastName = object.lastName ?? "";
    message.email = object.email ?? "";
    message.phoneNumber = object.phoneNumber ?? "";
    message.username = object.username ?? "";
    message.addressLine1 = object.addressLine1 ?? "";
    message.addressLine2 = object.addressLine2 ?? undefined;
    message.city = object.city ?? "";
    message.nation = object.nation ?? "";
    message.gender = object.gender ?? 0;
    message.role = object.role ?? 0;
    message.dateOfBirth = object.dateOfBirth ?? undefined;
    message.customer = (object.customer !== undefined && object.customer !== null)
      ? Customer.fromPartial(object.customer)
      : undefined;
    message.shipper = (object.shipper !== undefined && object.shipper !== null)
      ? Shipper.fromPartial(object.shipper)
      : undefined;
    message.shopOwner = (object.shopOwner !== undefined && object.shopOwner !== null)
      ? ShopOwner.fromPartial(object.shopOwner)
      : undefined;
    return message;
  },
};

export type UsersServiceService = typeof UsersServiceService;
export const UsersServiceService = {
  createUser: {
    path: "/com.ecommerceapp.v1.UsersService/CreateUser",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateUserRequest) => Buffer.from(CreateUserRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CreateUserRequest.decode(value),
    responseSerialize: (value: CreateUserResponse) => Buffer.from(CreateUserResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CreateUserResponse.decode(value),
  },
} as const;

export interface UsersServiceServer extends UntypedServiceImplementation {
  createUser: handleUnaryCall<CreateUserRequest, CreateUserResponse>;
}

export interface UsersServiceClient extends Client {
  createUser(
    request: CreateUserRequest,
    callback: (error: ServiceError | null, response: CreateUserResponse) => void,
  ): ClientUnaryCall;
  createUser(
    request: CreateUserRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CreateUserResponse) => void,
  ): ClientUnaryCall;
  createUser(
    request: CreateUserRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CreateUserResponse) => void,
  ): ClientUnaryCall;
}

export const UsersServiceClient = makeGenericClientConstructor(
  UsersServiceService,
  "com.ecommerceapp.v1.UsersService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): UsersServiceClient;
  service: typeof UsersServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
